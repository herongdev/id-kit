import { IdCodesResult, IdValue } from "../common/types.uts";
import { get, set } from "../common/storage.uts";
import { uuid4 } from "../common/uuid.uts";
import { getAndroidIdRaw } from "./adapters/android_id.uts";
import { getOAIDRaw } from "./adapters/oaid.uts";
import { getAAIDRaw } from "./adapters/aaid.uts";
import { getPseudoIdRaw } from "./adapters/pseudo_id.uts";
import Application from "android.app.Application";
import DeviceIdentifier from "com.github.gzuliyujiang.oaid.DeviceIdentifier";
type CacheType = {
    ts: number;
    data: IdCodesResult;
};
let _consent = false;
let _salt = "";
let _cache: CacheType | null = null;
const DEFAULT_ORDER = ["oaid", "androidId", "guid", "pseudoId", "aaid"];
function sha256HexSync(input: string): string {
    // 简化：无原生字节数组时使用 JS 级别 hash 近似，避免 getBytes/byte[] 依赖
    let h1 = 0x811c9dc5;
    for (let i = 0; i < input.length; i++) {
        h1 ^= (input.charCodeAt(i) as number);
        h1 = (h1 + ((h1 << 1) + (h1 << 4) + (h1 << 7) + (h1 << 8) + (h1 << 24))) | 0;
    }
    const hex = (h1 >>> 0).toString(16);
    let outHex = hex;
    if ((hex.length % 2) == 1) {
        outHex = ("0" + hex);
    }
    return outHex;
}
function buildSync(source: string, value?: string | null, exposeRaw?: boolean, limited?: boolean | null, msg?: string | null): IdValue {
    const available = value != null;
    const out: UTSJSONObject = { available, limited: (limited === true), source } as UTSJSONObject;
    if (msg != null)
        (out as UTSJSONObject)["message"] = msg;
    if (available) {
        const h = sha256HexSync((value as string) + _salt);
        (out as UTSJSONObject)["hash"] = h;
        const showRaw = (exposeRaw === true);
        if (showRaw)
            (out as UTSJSONObject)["value"] = value as string;
    }
    return out as IdValue;
}
export async function register(options?: UTSJSONObject | null): Promise<UTSJSONObject> {
    // 开源库预取（与隐私同意放同一时机）
    try {
        DeviceIdentifier.register(UTSAndroid.getUniActivity()!!.getApplication()!! as Application);
    }
    catch (e: any) { }
    // 可选：提前加载 MSA 安全库（若接入）
    // try { java.lang.System.loadLibrary("msaoaidsec") } catch {}
    _consent = true;
    return { consent: _consent } as UTSJSONObject;
}
export function setSalt(salt: string): void {
    _salt = salt;
}
export async function getAndroidId(exposeRaw: boolean = false): Promise<IdValue> {
    const v = getAndroidIdRaw();
    return buildSync("androidId", v, exposeRaw, false, null);
}
export async function getGuid(exposeRaw: boolean = false): Promise<IdValue> {
    let guid = get("UNIIDKIT_GUID") as string | null;
    if (guid == null || guid.length === 0) {
        guid = `app:${uuid4()}`;
        set("UNIIDKIT_GUID", guid);
    }
    return buildSync("guid", guid as string, exposeRaw, false, null);
}
export async function getOAID(): Promise<IdValue> {
    const ctx = UTSAndroid.getUniActivity()!!;
    const r = await getOAIDRaw(ctx);
    return buildSync("oaid", r.value ?? null, false, r.limited ?? null, r.message ?? null);
}
export async function getAAID(): Promise<IdValue> {
    const ctx = UTSAndroid.getUniActivity()!!;
    const r = await getAAIDRaw(ctx);
    return buildSync("aaid", r.value ?? null, false, r.limited ?? null, r.message ?? null);
}
export async function getIdCodes(options?: UTSJSONObject | null): Promise<IdCodesResult> {
    const include = (options?.getArray<string>("include") ?? DEFAULT_ORDER) as string[];
    const exposeRaw = (options?.getBoolean("exposeRaw") === true);
    const ttl = (options?.getNumber("ttlMs") ?? (24 * 3600 * 1000)) as number;
    const c = _cache;
    if (c != null && Date.now() - c.ts < ttl)
        return c.data;
    const res: IdCodesResult = {
        consent: _consent,
        ts: Date.now(),
    } as IdCodesResult;
    if (!_consent) {
        res.guid = { available: false, source: "guid", message: "consent=false" } as IdValue;
        return res;
    }
    if (include.indexOf("oaid") >= 0)
        res.oaid = await getOAID();
    if (include.indexOf("androidId") >= 0)
        res.androidId = await getAndroidId(exposeRaw);
    if (include.indexOf("aaid") >= 0)
        res.aaid = await getAAID();
    if (include.indexOf("guid") >= 0)
        res.guid = await getGuid(exposeRaw);
    if (include.indexOf("pseudoId") >= 0)
        res.pseudoId = buildSync("pseudoId", getPseudoIdRaw(), exposeRaw, false, null);
    function pick(res: IdCodesResult, key: string): IdValue | null {
        if (key === "oaid")
            return (res.oaid ?? null);
        if (key === "androidId")
            return (res.androidId ?? null);
        if (key === "guid")
            return (res.guid ?? null);
        if (key === "pseudoId")
            return (res.pseudoId ?? null);
        if (key === "aaid")
            return (res.aaid ?? null);
        return null;
    }
    res.best = null;
    for (let i = 0; i < include.length; i++) {
        const k = include[i];
        const v = pick(res, k);
        if (v != null && v.available) {
            res.best = k;
            break;
        }
    }
    _cache = { ts: Date.now(), data: res } as CacheType;
    return res;
}
export async function getBestId(options?: UTSJSONObject | null): Promise<IdValue> {
    const prefer = (options?.getArray<string>("prefer") ?? DEFAULT_ORDER) as string[];
    const exposeRaw = (options?.getBoolean("exposeRaw") === true);
    const args: UTSJSONObject = { "include": prefer as any, "exposeRaw": exposeRaw } as UTSJSONObject;
    const r = await getIdCodes(args);
    if (r.best != null) {
        const b = r.best as string;
        if (b === "oaid" && r.oaid != null)
            return r.oaid as IdValue;
        if (b === "androidId" && r.androidId != null)
            return r.androidId as IdValue;
        if (b === "guid" && r.guid != null)
            return r.guid as IdValue;
        if (b === "pseudoId" && r.pseudoId != null)
            return r.pseudoId as IdValue;
        if (b === "aaid" && r.aaid != null)
            return r.aaid as IdValue;
    }
    return { available: false, source: "none", message: "no id available" } as IdValue;
}
