<template>
  <view class="wrapper">
    <view class="actions">
      <button type="primary" @click="onConsent" :disabled="consent || loading">
        {{ consent ? '已同意' : '同意并初始化' }}
      </button>
      <button @click="onGetBest" :disabled="!consent || loading">获取最佳ID</button>
    </view>

    <view class="result" v-if="hasResult">
      <text>来源：{{ result.source }}</text>
      <text>可用：{{ result.available }}</text>
      <text v-if="result.hash">哈希：{{ result.hash }}</text>
      <text v-if="result.value">原值：{{ result.value }}</text>
      <text v-if="result.message">说明：{{ result.message }}</text>
    </view>
  </view>
</template>

<script>
import { register, setSalt, getBestId } from '@/uni_modules/id-kit'

export default {
  data() {
    return {
      consent: false,
      loading: false,
      hasResult: false,
      // 结果使用 UTSJSONObject，避免将原生 JSONObject 强转为自定义类型导致 ClassCastException
      result: {} as UTSJSONObject
    }
  },
  methods: {
    async onConsent() {
      this.loading = true
      try {
        await register({})
        setSalt('demo-salt')
        this.consent = true
        uni.showToast({ title: '已同意' })
      } catch (e) {
        uni.showToast({ title: '初始化失败', icon: 'none' })
      } finally {
        this.loading = false
      }
    },
    async onGetBest() {
      this.loading = true
      try {
        // 原生返回 UTSJSONObject；按需拷贝到响应式 result
        const best = (await getBestId({ exposeRaw: false })) as UTSJSONObject

        // 为稳妥起见做一次空值兜底
        this.result['source'] = (best['source'] ?? 'none') as string
        this.result['available'] = (best['available'] === true)
        this.result['hash'] = (best['hash'] ?? null) as (string | null)
        this.result['value'] = (best['value'] ?? null) as (string | null)
        this.result['limited'] = (best['limited'] ?? null) as (boolean | null)
        this.result['message'] = (best['message'] ?? null) as (string | null)

        this.hasResult = true
      } catch (e) {
        console.log('onGetBest error', e)
        this.result = {} as UTSJSONObject
        this.hasResult = true
      } finally {
        this.loading = false
      }
    }
  }
}
</script>

<style lang="scss">
.wrapper {
  padding: 24rpx;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.actions {
  display: flex;
}

.result {
  display: flex;
  flex-direction: column;
}

.logo {
  height: 100px;
  width: 100px;
  margin: 100px auto 25px auto;
}

.title {
  font-size: 18px;
  color: #8f8f94;
  text-align: center;
}
</style>
